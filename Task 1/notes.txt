
Hi Hanlin,*
*) If the user provides 1 text file, your program should return the corresponding profile
*) If the user provides 2 text file, your program should compute the two profiles, normalise each, compare the normalised profiles, after which the profiles are no longer required as they are not the point here.

Fair enough?

Cheers
MichaelW




commas=$(grep -o "," "$File" | wc -l) echo comma "$commas"
Semicolon=$(grep -o ";" "$File" | wc -l) echo Semi_colon "$Semicolon"
sentence=$(grep -ow "." "$File" | wc -l) echo sentence "$sentence"





commas=$(grep -o "," "$File" | wc -l) 
echo comma "$commas"

Semicolon=$(grep -o ";" "$File" | wc -l) 
echo Semi_colon "$Semicolon"

sentence=$(grep -ow "." "$File" | wc -l) 
echo sentence "$sentence"



also	0
although	0
and	1
as	1
because	0
before	0
but	0
comma	9
compound_word	2
contraction	4
for	1
if	1
nor	0
of	0
or	0
semi_colon	0
sentence	14
since	0
that	0
though	0
until	0
when	0
whenever	0
whereas	0
which	0
while	0
word	95
yet	0






compound_word	
contraction	
semi_colon	
sentence	
comma





$ awk 'NF{ count[ toupper( $0 ) ]++} 
    END{ for ( name in count ) { print name " appears " count[ name ] " times" };
}' input




declare -a StringArray=( "also" "although" "and" "as" "because" "before" "but" "for" "if" "nor" "of" "or" "since" "that" "though"  "until"  "when" "whenever" "whereas" "which"  "while"  "yet" )

for val in ${StringArray[@]};

do




done



    foundInfiles=$( grep -ow "$val" $File | wc -l )
    echo $val $foundInfiles


    regx for compound words



    [A-Za-z]+(?:-+[A-Za-z]+)

    \b[A-Za-z]+(?:-+[A-Za-z]+)+\b